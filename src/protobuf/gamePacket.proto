syntax = "proto3";

import "./request.proto";
import "./response.proto";
import "./notification.proto";

package packet;

message CommonPacket{
    uint32 packetType = 1;
    uint32 versionLength = 2;
    string version = 3;
    uint32 sequence = 4;    
    uint32 payloadLength = 5;
    bytes payload = 6;
}

/*
    게임 데이터 명세
*/
message RoomData {
    int32 id = 1;
    int64 ownerId = 2;
    string ownerEmail = 3;
    string name = 4;
    int32 maxUserNum = 5;
    RoomStateType state = 6; // WAIT 0, PREPARE 1, INAGAME 2
    repeated UserData users = 7; // 인덱스 기반으로 턴 진행
}

// 입장했을때는 랜덤으로 체력만큼 카드 받음.
// 하루 종료 시 체력만큼의 카드만 남길 수 있음.
// 이후 낮이 될때마다 카드 두장 받고 시작
message UserData {
    int64 id = 1;
    string email = 2;
    string nickname = 3;
    CharacterData character = 4;
}

message CharacterData {
    CharacterType characterType = 1;
    RoleType roleType = 2;
    bool aliveState = 3;
    int32 level = 4;
    int32 maxExp = 5;
    int32 exp = 6;
    int32 gold = 7;
    int32 coolDown = 8;
    int32 maxHp = 9;
    int32 hp = 10;
    int32 mp = 11;
    int32 attack = 12;
    int32 armor = 13;
    int32 weapon = 14;
    int32 potion = 15;
    CharacterStateInfoData stateInfo = 16;
    repeated int32 equips = 17;
    repeated int32 debuffs = 18;
    repeated CardData handCards = 19;
    int32 handCardsCount = 20;
    int32 bbangCount = 21;
}

message CharacterPositionData {
    int64 id = 1;
    double x = 2;
    double y = 3;
}

message CardData {
    CardType type = 1;
    int32 count = 2;
}

message GameStateData {
    PhaseType phaseType = 1; // DAY 1, EVENING 2, END 3 (하루 종료시 카드 버리는 턴)
    int64 nextPhaseAt = 2; // 다음 페이즈 시작 시점(밀리초 타임스탬프)
}

message CharacterStateInfoData {
    CharacterStateType state = 1;
    CharacterStateType nextState = 2;
    int64 nextStateAt = 3; // state가 nextState로 풀리는 밀리초 타임스탬프. state가 NONE이면 0
    int64 stateTargetUserId = 4; // state에 target이 있을 경우
}

/* 
    패킷 명세
*/

// 최상위 GamePacket 메시지
message GamePacket {
    oneof payload {
        // 회원가입 및 로그인
        C2SRegisterRequest registerRequest = 1;
        S2CRegisterResponse registerResponse = 2;
        C2SLoginRequest loginRequest = 3;
        S2CLoginResponse loginResponse = 4;

        // 방 생성
        C2SCreateRoomRequest createRoomRequest = 5;
        S2CCreateRoomResponse createRoomResponse = 6;

        // 방 목록 조회
        C2SGetRoomListRequest getRoomListRequest = 7;
        S2CGetRoomListResponse getRoomListResponse = 8;

        // 방 참가
        C2SJoinRoomRequest joinRoomRequest = 9;
        S2CJoinRoomResponse joinRoomResponse = 10;

        // 랜덤 방 참가
        C2SJoinRandomRoomRequest joinRandomRoomRequest = 11;
        S2CJoinRandomRoomResponse joinRandomRoomResponse = 12;

        // 방 참가 알림
        S2CJoinRoomNotification joinRoomNotification = 13;

        // 방 나가기
        C2SLeaveRoomRequest leaveRoomRequest = 14;
        S2CLeaveRoomResponse leaveRoomResponse = 15;

        // 방 나가기 알림
        S2CLeaveRoomNotification leaveRoomNotification = 16;

        // 게임 시작 전 역할 및 캐릭터 셔플 요청
        C2SGamePrepareRequest gamePrepareRequest = 17;
        S2CGamePrepareResponse gamePrepareResponse = 18;
        S2CGamePrepareNotification gamePrepareNotification = 19;

        // 게임 시작
        C2SGameStartRequest gameStartRequest = 20;
        S2CGameStartResponse gameStartResponse = 21;
        S2CGameStartNotification gameStartNotification = 22;

        // 위치 업데이트
        C2SPositionUpdateRequest positionUpdateRequest = 23;
        S2CPositionUpdateNotification positionUpdateNotification = 24;

        // 카드 사용
        C2SUseCardRequest useCardRequest = 25;
        S2CUseCardResponse useCardResponse = 26;

        // 카드 효과 알림
        S2CUseCardNotification useCardNotification = 27;
        S2CEquipCardNotification equipCardNotification = 28;
        S2CCardEffectNotification cardEffectNotification = 29;

        // 플리마켓
        S2CFleaMarketNotification fleaMarketNotification = 30;
        C2SFleaMarketPickRequest fleaMarketPickRequest = 31;
        S2CFleaMarketPickResponse fleaMarketPickResponse = 32;
        C2SFleaMarketCardPickRequest fleMarketCardPickRequest = 33;
        S2CFleaMarketCardPickResponse fleMarketCardPickResponse = 34;

        // 카드 사용 등으로 인한 유저 정보 업데이트
        S2CUserUpdateNotification userUpdateNotification = 35;
        
        // 페이즈 업데이트
        S2CPhaseUpdateNotification phaseUpdateNotification = 36;

        // 리액션
        C2SReactionRequest reactionRequest = 37;
        S2CReactionResponse reactionResponse = 38;

        // 턴 종료시 (phaseType 3) 카드 버리기
        C2SDestroyCardRequest destroyCardRequest = 39;
        S2CDestroyCardResponse destroyCardResponse = 40;

        // 게임 종료
        S2CGameEndNotification gameEndNotification = 41;

        // 카드 선택
        C2SCardSelectRequest cardSelectRequest = 42;
        S2CCardSelectResponse cardSelectResponse = 43;

        // 디버프 넘기기
        C2SPassDebuffRequest passDebuffRequest = 44;
        S2CPassDebuffResponse passDebuffResponse = 45;
        S2CWarningNotification warningNotification = 46;

        // 효과 알림
        S2CAnimationNotification animationNotification = 47;        

        // 전역 메세지
        S2CGlobalMessageResponse globalMessageResponse = 48;

        // 플리마켓
        C2SFleaMarketSellRequest fleaMarketSellRequest = 49;

        // 스폰 포지션 전송
        C2SSpawnPositionSendRequest spawnPositionSendRequest = 50;
    }
}

/* 
    실패 코드
*/
enum GlobalFailCode {
    NONE_FAILCODE = 0;
    UNKNOWN_ERROR = 1;
    INVALID_REQUEST = 2;
    AUTHENTICATION_FAILED = 3;
    CREATE_ROOM_FAILED = 4;
    JOIN_ROOM_FAILED = 5;
    LEAVE_ROOM_FAILED = 6;
    REGISTER_FAILED = 7;
    ROOM_NOT_FOUND = 8;
    CHARACTER_NOT_FOUND = 9;
    CHARACTER_STATE_ERROR = 10;
    CHARACTER_NO_CARD = 11;
    INVALID_ROOM_STATE = 12;
    NOT_ROOM_OWNER = 13;
    ALREADY_USED_BBANG = 14;
    INVALID_PHASE = 15;
    CHARACTER_CONTAINED = 16;
}

enum WarningType {
    NO_WARNING = 0;
    BOMB_WANING = 1;
}

enum WinType {
    TARGET_AND_BODYGUARD_WIN = 0;
    HITMAN_WIN = 1;
    PSYCHOPATH_WIN = 2;
}

enum CharacterType {
    NONE_CHARACTER = 0;
    RED = 1; // 빨강이
    SHARK = 3; // 상어군
    MALANG = 5; // 말랑이
    FROGGY = 7; // 개굴군
    PINK = 8; // 핑크군
    SWIM_GLASSES = 9; // 물안경군
    MASK = 10; // 가면군
    DINOSAUR = 12; // 공룡이
    PINK_SLIME = 13; // 핑크슬라임
}

enum CharacterStateType {
    NONE_CHARACTER_STATE = 0;
    BBANG_SHOOTER = 1; // 빵야 시전자
    BBANG_TARGET = 2; // 빵야 대상 (쉴드 사용가능 상태)
    DEATH_MATCH_STATE = 3; // 현피 중 자신의 턴이 아닐 때
    DEATH_MATCH_TURN_STATE = 4; // 현피 중 자신의 턴
    FLEA_MARKET_TURN = 5; // 플리마켓 자신의 턴
    FLEA_MARKET_WAIT = 6; // 플리마켓 턴 대기 상태
    GUERRILLA_SHOOTER = 7; // 게릴라 시전자
    GUERRILLA_TARGET = 8; // 게릴라 대상
    BIG_BBANG_SHOOTER = 9; // 난사 시전자
    BIG_BBANG_TARGET = 10; // 난사 대상
    ABSORBING = 11; // 흡수 중
    ABSORB_TARGET = 12; // 흡수 대상
    HALLUCINATING = 13; // 신기루 중
    HALLUCINATION_TARGET = 14; // 신기루 대상
    CONTAINED = 15; // 감금 중
}

enum CardType {
    NONE = 0;
    BBANG = 1; // 20장
    BIG_BBANG = 2; // 1장
    SHIELD = 3; // 10장
    VACCINE = 4; // 6장
    CALL_119 = 5; // 2장
    DEATH_MATCH = 6; // 4장
    GUERRILLA = 7; // 1장
    ABSORB = 8; // 4장
    HALLUCINATION = 9; // 4장
    FLEA_MARKET = 10; // 3장
    MATURED_SAVINGS = 11; // 2장
    WIN_LOTTERY = 12; // 1장
    SNIPER_GUN = 13; // 1장
    HAND_GUN = 14; // 2장
    DESERT_EAGLE = 15; // 3장
    AUTO_RIFLE = 16; // 2장
    LASER_POINTER = 17; // 1장
    RADAR = 18; // 1장
    AUTO_SHIELD = 19; // 2장
    STEALTH_SUIT = 20; // 2장
    CONTAINMENT_UNIT = 21; // 3장
    SATELLITE_TARGET = 22; // 1장
    BOMB = 23; // 1장
   SUR5VER_BASIC_SKILL = 100;
   MAGICIAN_BASIC_SKILL = 101;
   ARCHER_BASIC_SKILL = 102;
   ROGUE_BASIC_SKILL = 103;
   WARRIOR_BASIC_SKILL = 104;
   MAGICIAN_EXTENDED_SKILL = 105;
   ARCHER_EXTENDED_SKILL = 106;
   ROGUE_EXTENDED_SKILL = 107;
   WARRIOR_EXTENDED_SKILL = 108;
   MAGICIAN_FINAL_SKILL = 109;
   BOSS_BASIC_SKILL = 113;
   BOSS_EXTENDED_SKILL = 114;
   BOSS_FINAL_SKILL = 115;
   BASIC_HP_POTION = 201;
   BASIC_MP_POTION = 202;
   ADVANCED_HP_POTION = 203;
   ADVANCED_MP_POTION = 204;
   MASTER_HP_POTION = 205;
   MASTER_MP_POTION = 206;
   BASIC_EXP_POTION = 207;
   MASTER_EXP_POTION = 208;
   NONE_WEAPON = 301;
   NONE_HEAD = 302;
   NONE_ARMOR = 303;
   NONE_CLOAK = 304;
   NONE_GLOVE = 305;
   EXPLORER_WEAPON = 306;
   EXPLORER_HEAD = 307;
   EXPLORER_ARMOR = 308;
   EXPLORER_CLOAK = 309;
   EXPLORER_GLOVE = 310;
   HERO_WEAPON = 311;
   HERO_HEAD = 312;
   HERO_ARMOR = 313;
   HERO_CLOAK = 314;
   HERO_GLOVE = 315;
   LEGENDARY_WEAPON = 316;
   LEGENDARY_HEAD = 317;
   LEGENDARY_ARMOR = 318;
   LEGENDARY_CLOAK = 319;
   LEGENDARY_GLOVE = 320;
   EXIT_BUTTON = 1000;
}

enum RoleType {
    NONE_ROLE = 0;
    TARGET = 1;
    BODYGUARD = 2;
    HITMAN = 3;
    PSYCHOPATH = 4;
}

enum RoomStateType {
    WAIT = 0;
    PREPARE = 1;
    INGAME = 2;
}

enum PhaseType {
    NONE_PHASE = 0;
    DAY = 1;
    EVENING = 2;
    END = 3;
}

enum ReactionType {
    NONE_REACTION = 0;
    NOT_USE_CARD = 1;
}

enum SelectCardType {
    HAND = 0;
    EQUIP = 1;
    WEAPON = 2;
    DEBUFF = 3;
}

enum AnimationType {
    NO_ANIMATION = 0;
    SATELLITE_TARGET_ANIMATION = 1;
    BOMB_ANIMATION = 2;
    SHIELD_ANIMATION = 3;
    TWINMAGIC_ANIMATION = 4;
    ARCHER_SHOT_ANIMATION = 5;
    ROGUE_ATTACK_ANIMATION = 6;
    WARRIOR_ATTACK_ANIMATION = 7;
    SPIRIT_ATTACK_ANIMATION = 8;
    BUFF_ANIMATION = 9;
}

enum GlobalMessageType
{
    GLOBAL_MESSAGE_NONE = 0;
    GLOBAL_MESSAGE_ROUND = 1;
    GLOBAL_MESSAGE_COOLTIME = 2;
    GLOBAL_DEBUG_MODE_ON = 3;
    GLOBAL_DEBUG_MODE_OFF = 4;
}
